Сеточная векторизация
---------------------
Векторизации подвергается пиксельное монохромное изображение типа контурной карты.
Пиксели контуров будем называть черными, все остальные - белыми.

На изображение накладывается сетка с квадратными ячейками.
Узлы сетки это вершины графа. Если на отрезке прямой, соединяющим два соседних узла, нет ни одного черного пикселя, между этими узлами существует ребро.
Во всех иных случаях (есть черные пиксели или узлы не соседние) ребер между вершинами нет.

Определение компонент связности
-------------------------------
На первом этапе определяем компоненты связности графа. Одна компонента связности - это множество вершин, лежащих внутри замкнутого контура исходного изображения.
Но поскольку наша цель - апроксимировать этот контур ломаной, попутно с определением компонент связности находим точки, принадлежащие этой ломаной.
Такими точками будут черные пиксели, обнаруженные нами в процессе определения ребер графа.
На каждом отрезке между двумя соседними узлами сетки таких точек будет не более одной (первый черный пиксель, найденный при прохождении отрезка).
Помимо местоположения этих точек, важно знать их принадлежность к контуру (компоненте связности), точнее к паре смежных контуров.
Поскольку во время обнаружения точек результат определения компонент связности еще не готов, временно будем привязывать точки к паре вершин графа.
После окончания определения к.с. графа по этой привязке можно будет определить, к каким контурам приналежит конкретная точка.

Алгоритм определения к.с.
------------------------
Просматриваются все узлы слева направо, сверху вниз.
Для каждого узла определяется его смежность с верхним и с левым соседом, если таковые имеются.
(узлы смежные, если на соединяющей их линии нет черных пикселей).
Если текущий узел не смежен ни с одним соседом, он один составляет новую временную компоненту связности.
Если текущий узел смежен только с одним соседом, он включается в компоненту соседа.
Если текущий узел смежен с обоими соседями, он включается в компоненту левого соседа, 
а компонента верхнего соседа объединяется к компонентой левого. 

Во время выполнении процедуры все компоненты связности считаютя временными,
но по окончании процедуры все временные компоненты становятся постоянными.

Создание разделительных точек
-------------------------
Попутно с определением к.с. создаем разделительные точки, из которых поздее будем строить контуры векторного изображения.
В процессе выяснения смежности мы проверяем все пиксели на отрезке, соединяющем узлы. 
Когда на этом отрезке встречается черный пиксель, создаем разделительную точку с координатами этого пикселя и 
ссылками на два узла по концам отрезка.

class YPount
   Dot Dot1, Dot2;
   Point Point; 
   
class Dot
   Comp Comp;


class Comp: List<Node>

class YContur: IContur
    List<YPoint> ypoints; 
	Dot[,] dots
    List<Comp> comps;

    


На втором этапе точки контуров, найденные на первом этапе, выстраиваются в ломаные, апроксимирующие линии исходного изображения.




Сборка контуров
---------------
Когда все узлы сетки окрашены, приступаем к построению контуров.


 








    не имеет смежных соседей, он окрашивается в новый цвет.
Если текущий узел не имеет смежных соседей, он окрашивается в новый цвет.
Если у текущего 